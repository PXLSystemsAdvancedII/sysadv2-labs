#include <linux/bpf.h>
#include <linux/if_ether.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/pkt_cls.h>

#define PORT 8080

struct bpf_map_def SEC("maps") connection_count = {
    .type = BPF_MAP_TYPE_PERCPU_ARRAY,
    .key_size = sizeof(__u32),
    .value_size = sizeof(__u64),
    .max_entries = 1,
};

SEC("socket")
int tcp_count(struct __sk_buff *skb) {
    u8 *cursor = 0;
    u32 port = PORT;
    __u64 *value;

    // Parse packet
    struct ethhdr *eth = cursor;
    if (eth + 1 > (struct ethhdr *)skb->data_end)
        return 0;

    cursor += sizeof(struct ethhdr);
    struct iphdr *ip = cursor;
    if (ip + 1 > (struct iphdr *)skb->data_end)
        return 0;

    if (ip->protocol != IPPROTO_TCP)
        return 0;

    cursor += sizeof(struct iphdr);
    struct tcphdr *tcp = cursor;
    if (tcp + 1 > (struct tcphdr *)skb->data_end)
        return 0;

    // Check if the packet is a TCP SYN packet and is destined to the specified port
    if (tcp->syn && ntohs(tcp->dest) == port) {
        // Update connection count
        value = bpf_map_lookup_elem(&connection_count, &port);
        if (value) {
            __sync_fetch_and_add(value, 1);
        }
    }

    return 0;
}

char _license[] SEC("license") = "GPL";
